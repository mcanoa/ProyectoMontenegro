/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import logica.dataConnection;
import logica.institutoMontenegro;

/**
 *
 * @author user
 */
public class VentanaGenerarInforme extends javax.swing.JFrame {

    BaseColor grisClaro = new BaseColor(230, 230, 230);
    BaseColor azulClaro = new BaseColor(124, 195, 255);

    PreparedStatement pst;
    Connection cn;
    ResultSet result;

    /**
     * Creates new form VentanaGenerarInforme
     */
    public VentanaGenerarInforme() {
        initComponents();
        this.getContentPane().setBackground(Color.white);
        editarDate1();;
        editarDate2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButtonGenerarInform = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generar Informe");
        setIconImage(getIconImage());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Generar Informe");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Fecha Inicial:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Fecha Final:");

        jButtonGenerarInform.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonGenerarInform.setText("Generar Informe");
        jButtonGenerarInform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarInformActionPerformed(evt);
            }
        });

        jDateChooser1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jDateChooser1KeyTyped(evt);
            }
        });

        jDateChooser2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jDateChooser2KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonGenerarInform)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 121, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jButtonGenerarInform)
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 Document documento = new Document();
    private void jButtonGenerarInformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarInformActionPerformed
        // TODO add your handling code here:
        
        
        institutoMontenegro i = new institutoMontenegro();
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        if (validarfechas(fechaInicial, fechaFinal)) {
            cn = dataConnection.conexion();
            try {
//                pst = cn.prepareStatement(
//                        "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"6%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
//                pst.setDate(1, (java.sql.Date) fechaInicial);
//                pst.setDate(2, (java.sql.Date) fechaFinal);
//                result = pst.executeQuery();
                Paragraph saltoLinea = new Paragraph();
                Paragraph instituto = new Paragraph();
                instituto.add("Institución Educativa Instituto Montenegro \n");
                instituto.setAlignment(Element.ALIGN_CENTER);
                Paragraph Nit = new Paragraph();
                Nit.add("NIT: 163470000291\n");
                Nit.setAlignment(Element.ALIGN_CENTER);
                Paragraph fecha = new Paragraph();
                fecha.add("Fecha: " + " " + i.fechaHoy().toString());
                fecha.setAlignment(Element.ALIGN_RIGHT);
                Paragraph firma = new Paragraph();
                Paragraph firma2 = new Paragraph();
                Paragraph PAE = new Paragraph();
                Nit.add("PAE (Programa Alimentación Escolar) \n");
                PAE.setAlignment(Element.ALIGN_CENTER);

                //Donde guardar el documento
                JFileChooser chooser = new JFileChooser();
                String ruta = "";
                chooser.setDialogTitle("Guardar Informe");
//                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
chooser.setAcceptAllFileFilterUsed(false);
int opcion = chooser.showSaveDialog(null);
if (opcion == JFileChooser.APPROVE_OPTION) {
    ruta = chooser.getSelectedFile().getAbsolutePath();
    PdfWriter.getInstance(documento, new FileOutputStream(ruta + ".pdf"));
    documento.open();
    documento.add(fecha);
    documento.add(new Paragraph(instituto));
    documento.add(new Paragraph(Nit));
    saltoLinea.add("\n\n");
    documento.add(new Paragraph(PAE));
    
    documento.add(saltoLinea);
    documento.add(new Paragraph("Informe Asistencias \n"));
    documento.add(saltoLinea);
    documento.add(i.imagenPdf());
    generarTabla1();
    documento.add(saltoLinea);
    generarTabla2();
    documento.add(saltoLinea);
    generarTabla3();
    documento.add(saltoLinea);
    generarTabla4();
    documento.add(saltoLinea);
    generarTabla5();
    documento.add(saltoLinea);
    generarTabla6();
    documento.add(saltoLinea);
    generarTabla7();
    documento.add(saltoLinea);
    generarTabla8();
    documento.add(saltoLinea);
    generarTabla9();
    documento.add(saltoLinea);
    generarTabla10();
    documento.add(saltoLinea);
    generarTabla11();
    documento.add(saltoLinea);
    documento.add(saltoLinea);
//    // Anchos de las columnas
//    float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
//    PdfPTable tabla = new PdfPTable(anchosFilas);
//    String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
//    // Porcentaje que ocupa a lo ancho de la pagina del PDF
//    tabla.setWidthPercentage(100);
//    // Alineacion horizontal centrada
//    tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
//    // agregar celda que ocupa las 4 columnas de los rotulos
//    PdfPCell cell = new PdfPCell(new Paragraph("Asistencias PAE"));
//    cell.setColspan(5);
//    // Centrar contenido de celda
//    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
//    // Color de fondo de la celda
//    cell.setBackgroundColor(azulClaro);
//    tabla.addCell(cell);
//    
//    for (String rotulosColumna : rotulosColumnas) {
//        cell = new PdfPCell(new Paragraph(rotulosColumna));
//        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
//        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
//        cell.setBackgroundColor(grisClaro);
//        tabla.addCell(cell);
//    }
//    documento.add(i.imagenPdf());
//    while (result.next()) {
//        
//        cell = new PdfPCell(new Paragraph(result.getString("documento")));
//        tabla.addCell(cell);
//        cell = new PdfPCell(new Paragraph(result.getString("nombres")));
//        tabla.addCell(cell);
//        cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
//        tabla.addCell(cell);
//        cell = new PdfPCell(new Paragraph(result.getString("grado")));
//        tabla.addCell(cell);
//        cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
//        tabla.addCell(cell);
//        
//    }
//    documento.add(tabla);
//    documento.add(saltoLinea);
//    documento.add(saltoLinea);
    generarInformeOcasionales(fechaInicial, fechaFinal);
    documento.add(saltoLinea);
    documento.add(saltoLinea);
    documento.add(saltoLinea);
    firma.add(" ___________________________________________\n");
    firma.setAlignment(Element.ALIGN_CENTER);
    documento.add(firma);
    firma2.add(" Rector: Jose Uriel Gonzalez Ramirez\n");
    firma2.setAlignment(Element.ALIGN_CENTER);
    documento.add(firma2);
    documento.close();
    JOptionPane.showMessageDialog(null, "Informe Generado");
    
    cn.close();
} else if (opcion == JFileChooser.CANCEL_OPTION) {
    JOptionPane.showMessageDialog(null, "Informe no generado");
}

            } catch (SQLException | FileNotFoundException | DocumentException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            } catch (ParseException ex) {
                Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, revisa las fechas");
        }

    }//GEN-LAST:event_jButtonGenerarInformActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        VentanaAdministrador.cambiarestado(true);
    }//GEN-LAST:event_formWindowClosed

    private void jDateChooser1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDateChooser1KeyTyped
        // TODO add your handling code here:
        noteclearCaracteres(evt);
        noTeclearLetras(evt);
    }//GEN-LAST:event_jDateChooser1KeyTyped

    private void jDateChooser2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDateChooser2KeyTyped
        // TODO add your handling code here:
        noteclearCaracteres(evt);
        noTeclearLetras(evt);
    }//GEN-LAST:event_jDateChooser2KeyTyped

    public Date formatFecha(Date fecha) {
        SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
        String date1 = format1.format(fecha);
        fecha = java.sql.Date.valueOf(date1);
        return fecha;

    }

    /*agrega el contenido del documento; para este ejemplo agrega una tabla con
	* datos y una imagen
	* Espera como entrada el documento donde agregara el contenido
     */
    private void agregarContenido(Document document) throws DocumentException {
        Paragraph ParrafoHoja = new Paragraph();

        /*Agregamos una linea en blanco al principio del documento
         */
        agregarLineasEnBlanco(ParrafoHoja, 1);

        agregarLineasEnBlanco(ParrafoHoja, 1);
        /* 1.- AGREGAMOS LA TABLA
		 * agregarTabla(ParrafoHoja);
		 * Agregar 2 lineas en blanco 
         */
        agregarLineasEnBlanco(ParrafoHoja, 2);
        /* 2.- AGREGAMOS LA IMAGEN */
        // try {
        // Image im = Image.getInstance("logo_mysql.gif");
        // im.setAlignment(Image.ALIGN_CENTER | Image.TEXTWRAP);
        // im.setWidthPercentage(50);
        // ParrafoHoja.add(im);
        // } catch (Exception e) {
        // e.printStackTrace();
        // }

        document.add(ParrafoHoja);

    }

    /* Agrega las lineas en blanco especificadas a un parrafo especificado */
    private static void agregarLineasEnBlanco(Paragraph parrafo, int nLineas) {
        for (int i = 0; i < nLineas; i++) {
            parrafo.add(new Paragraph(" "));
        }
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("imagenes/Escudo.png"));

        return retValue;
    }

    public boolean validarfechas(Date fecha1, Date fecha2) {
        if (fecha1.compareTo(fecha2) > 0) {
            return false;
        } else {
            return true;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGenerarInform;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    public void noteclearCaracteres(KeyEvent evt) {
        int cadena = (int) evt.getKeyChar();
        if (cadena >= 33 && cadena <= 47
                || cadena >= 58 && cadena <= 64
                || cadena >= 91 && cadena <= 96
                || cadena >= 123 && cadena <= 127) {
            JOptionPane.showMessageDialog(null, "no ingrese caracteres especiales en los campos de texto");
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }

    }

    /**
     * Metodo para cuando se dijite una letra en un campo de numeros
     *
     * @param evt
     */
    public void noTeclearLetras(KeyEvent evt) {
        if (Character.isLetter((char) evt.getKeyChar())) {
            JOptionPane.showMessageDialog(null, "INGRESE SOLO NUMEROS");
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }
    }

    /**
     * Metodo para cuando se dijite un numero en un campo de letras
     *
     * @param evt
     */
    public void noTeclearNumeros(KeyEvent evt) {
        if (Character.isDigit((char) evt.getKeyChar())) {
            JOptionPane.showMessageDialog(null, "INGRESE SOLO LETRAS");
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }
    }

    public void editarDate1() {

        JTextFieldDateEditor editor = (JTextFieldDateEditor) jDateChooser1.getDateEditor();
        editor.setEditable(false);
    }

    public void editarDate2() {

        JTextFieldDateEditor editor = (JTextFieldDateEditor) jDateChooser2.getDateEditor();
        editor.setEditable(false);
    }

    public void generarInformeOcasionales(Date fechaInicial, Date fechaFinal) {
        try {
            cn = dataConnection.conexion();
            pst = cn.prepareStatement(
                    "select documento,nombres,apellidos, count(*) as asistencias_Semanales from  estudiante_ocasional WHERE fechaIngreso between ? AND ? GROUP BY documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes Ocasionales \n");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");
            
            
                    
            
            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios del programa de manera ocasional"));
            documento.add(saltoLinea);
            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f};
            PdfPTable tabla2 = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla2.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Ocasionales PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla2.addCell(cell);

            for (int i = 0; i < rotulosColumnas.length; i++) {
                cell = new PdfPCell(new Paragraph(rotulosColumnas[i]));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla2.addCell(cell);
            }
            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla2.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla2.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla2.addCell(cell);

                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla2.addCell(cell);

            }
            documento.add(tabla2);

        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public void generarTabla6() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"6%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 6");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 6"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 6 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void generarTabla1() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"1%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 1°");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 1"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 1 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void generarTabla2() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"2%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 2");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 2°"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 2° PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void generarTabla3() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"3%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 3°");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 3°"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 3 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void generarTabla4() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"4%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 4");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 4"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 4 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void generarTabla5() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"5%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 5");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 5"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 5 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void generarTabla7() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"7%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 7°");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 7°"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 7 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void generarTabla8() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"8%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 8°");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 8°"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 8 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void generarTabla9() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"9%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 9°");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 9°"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 9 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void generarTabla10() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"10%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 10");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 10"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 10 PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void generarTabla11() throws DocumentException {
        Date fechaInicial = formatFecha(jDateChooser1.getDate());
        Date fechaFinal = formatFecha(jDateChooser2.getDate());
        try {
            cn = dataConnection.conexion();

            pst = cn.prepareStatement(
                    "select est.documento,est.nombres,est.apellidos,est.grado, count(*) as asistencias_Semanales from  instituto_montenegro im JOIN estudiante est ON(im.documentoEstudiante=est.documento) WHERE est.grado like(\"11%\") and fechaIngreso between ? AND ? GROUP BY est.documento;");
            pst.setDate(1, (java.sql.Date) fechaInicial);
            pst.setDate(2, (java.sql.Date) fechaFinal);
            result = pst.executeQuery();

            Paragraph saltoLinea = new Paragraph();
            Paragraph instituto1 = new Paragraph();
            instituto1.add("Asistencias Estudiantes grado 11°");
            instituto1.setAlignment(Element.ALIGN_CENTER);
            saltoLinea.add("\n\n");

            documento.add(instituto1);
            documento.add(saltoLinea);
            documento.add(new Paragraph("Estudiantes beneficiarios grado 11°"));
            documento.add(saltoLinea);

            // Anchos de las columnas
            float anchosFilas[] = {2f, 2f, 2f, 2f, 2f};
            PdfPTable tabla = new PdfPTable(anchosFilas);
            String rotulosColumnas[] = {"Documento", "Nombres", "Apellidos", "Grado", "Asistencias"};
            // Porcentaje que ocupa a lo ancho de la pagina del PDF
            tabla.setWidthPercentage(100);
            // Alineacion horizontal centrada
            tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            // agregar celda que ocupa las 4 columnas de los rotulos
            PdfPCell cell = new PdfPCell(new Paragraph("Asistencias Grado 11° PAE"));
            cell.setColspan(5);
            // Centrar contenido de celda
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            // Color de fondo de la celda
            cell.setBackgroundColor(azulClaro);
            tabla.addCell(cell);

            for (String rotulosColumna : rotulosColumnas) {
                cell = new PdfPCell(new Paragraph(rotulosColumna));
                cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(grisClaro);
                tabla.addCell(cell);
            }

            while (result.next()) {

                cell = new PdfPCell(new Paragraph(result.getString("documento")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("nombres")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("apellidos")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("grado")));
                tabla.addCell(cell);
                cell = new PdfPCell(new Paragraph(result.getString("asistencias_Semanales")));
                tabla.addCell(cell);

            }
            documento.add(tabla);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaGenerarInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
